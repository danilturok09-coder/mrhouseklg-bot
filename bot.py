import asyncio
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8497588100:AAFYuucn9j8teDlWZ6htv_N7IbaXLp1TQB8"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://mrhouseklg-bot.onrender.com{WEBHOOK_PATH}"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –•–ï–ù–î–õ–ï–†–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="price"),
         InlineKeyboardButton("–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
         InlineKeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MR.House. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã!")

# === –í–ï–ë–•–£–ö-–û–ë–†–ê–ë–û–¢–ß–ò–ö ===
async def webhook_handler(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram"""
    if request.method != "POST":
        return web.Response(status=405)  # Method Not Allowed

    try:
        update_data = await request.json()
        update = Update.de_json(update_data, bot_app.bot)
        await bot_app.process_update(update)
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return web.Response(status=500)

# === –ì–õ–û–ë–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
bot_app = None

async def main():
    global bot_app
    bot_app = Application.builder().token(TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("debug", debug))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await bot_app.initialize()
    logger.info("‚úÖ Application initialized")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot_app.bot.set_webhook(WEBHOOK_URL)
    logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 8443))
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.router.add_get("/", lambda r: web.Response(text="‚úÖ MR.House Bot is running!"))

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á—ë–Ω–Ω—ã–º
    try:
        await asyncio.Event().wait()  # –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except KeyboardInterrupt:
        pass
    finally:
        await runner.cleanup()
        await bot_app.shutdown()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())