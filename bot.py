import os
import time
import logging
import asyncio
from flask import Flask, request, jsonify
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ========= ENV =========
BOT_TOKEN = os.environ["BOT_TOKEN"]
BASE_URL  = os.environ.get("BASE_URL", "").rstrip("/")

# ========= LOGGING =========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")
try:
    import telegram
    logger.info(f"PTB version={getattr(telegram,'__version__','unknown')} | module={telegram.__file__}")
except Exception:
    pass

# ========= GLOBAL LOOP (–æ–¥–∏–Ω –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å) =========
LOOP = asyncio.new_event_loop()
asyncio.set_event_loop(LOOP)

# ========= PTB APP =========
application = Application.builder().token(BOT_TOKEN).build()
_initialized = False

def ensure_initialized() -> None:
    global _initialized
    if _initialized:
        return
    LOOP.run_until_complete(application.initialize())
    _initialized = True
    logger.info("‚úÖ Telegram Application initialized")

# ========= UI =========
MAIN_MENU = [
    ["üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤", "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã"],
    ["üßÆ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"],
    ["üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
]
LOCATIONS = [
    "–®–æ–ø–∏–Ω–æ", "–ß–∏–∂–æ–≤–∫–∞", "–°–∏–≤–∫–æ–≤–æ",
    "–ù–µ–∫—Ä–∞—Å–æ–≤–æ", "–ì—Ä—É–∑–¥–æ–≤–æ", "–í–µ—Å–Ω–∞–õ—ç–Ω–¥ (–ß–µ—Ä–Ω–æ—Å–≤–∏—Ç–∏–Ω–æ)",
    "—Ä-–Ω –º–∞–≥–∞–∑–∏–Ω–∞ METRO", "–≥.–†—è–∑–∞–Ω—å", "–ï–ª–æ–≤–∫–∞", "–ö–ü –ú–æ—Å–∫–æ–≤—Å–∫–∏–π",
]
def kb(rows): return ReplyKeyboardMarkup(rows, resize_keyboard=True)

LOCATIONS_DATA = {
    "–®–æ–ø–∏–Ω–æ": {
        "photo": f"{BASE_URL}/static/locations/shopino/cover.jpg" if BASE_URL else None,
        "caption": (
            "<b>–®–æ–ø–∏–Ω–æ</b>\n"
            "–ü–æ—Å—ë–ª–æ–∫ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.\n"
            "–í –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ."
        ),
        "presentation": f"{BASE_URL}/static/locations/shopino/presentation.pdf"
        if BASE_URL else "https://example.com/presentation-shopino.pdf",
    },
}

def make_locations_inline() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(name, callback_data=f"loc:{name}")] for name in LOCATIONS]
    rows.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(rows)

# ========= HANDLERS =========
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("‚ùó Unhandled error", exc_info=context.error)

async def send_welcome_with_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±–∞–Ω–Ω–µ—Ä. –ê–Ω—Ç–∏–¥—É–±–ª—å –Ω–∞ 10 —Å–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Ä–µ—Ç—Ä–∞—è—Ö."""
    now = time.time()
    last = context.user_data.get("_last_welcome_ts", 0)
    if now - last < 10:
        # —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ–¥—Ä—è–¥ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ—Ç—Ä–∞–π –æ—Ç Telegram
        return
    context.user_data["_last_welcome_ts"] = now

    banner_url = f"{BASE_URL}/static/welcome.jpg" if BASE_URL else None
    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b>MR.House</b>.\n"
        "–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –ø—Ä–æ–µ–∫—Ç, –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    )

    chat_id = update.effective_chat.id
    sent_banner = False
    if banner_url:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=banner_url, caption=caption, parse_mode="HTML")
            sent_banner = True
        except Exception as e:
            logger.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ-–±–∞–Ω–Ω–µ—Ä: {e}")

    if not sent_banner:
        # –®–ª—ë–º –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ caption
        await context.bot.send_message(chat_id=chat_id,
                                       text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MR.House. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.",
                                       parse_mode="HTML")

    await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb(MAIN_MENU))
    context.user_data["state"] = "MAIN"

async def show_locations_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = "LOC_LIST"
    text = "-----–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤-----\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:"
    markup = make_locations_inline()

    if update.message:
        await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏–∏:", reply_markup=markup)
    else:
        await context.bot.send_message(update.effective_chat.id, text, reply_markup=markup)

async def send_location_card(chat, location_name: str, context: ContextTypes.DEFAULT_TYPE):
    data = LOCATIONS_DATA.get(location_name)
    if not data:
        await context.bot.send_message(chat_id=chat.id, text=f"–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è ¬´{location_name}¬ª.")
        return
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìò –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", url=data["presentation"])],
        [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ª–æ–∫–∞—Ü–∏–π", callback_data="back_to_locs")],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    try:
        if data.get("photo"):
            await context.bot.send_photo(chat_id=chat.id, photo=data["photo"],
                                         caption=data["caption"], parse_mode="HTML", reply_markup=markup)
        else:
            raise RuntimeError("no photo")
    except Exception:
        await context.bot.send_message(chat_id=chat.id, text=data["caption"], parse_mode="HTML", reply_markup=markup)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await send_welcome_with_photo(update, context)

async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = "MAIN"
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb(MAIN_MENU))

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    state = context.user_data.get("state", "MAIN")

    if text == "üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤":
        return await show_locations_inline(update, context)

    if state == "MAIN":
        mapping = {
            "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã": "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º üîß",
            "üßÆ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏": "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å –∏ –±—é–¥–∂–µ—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).",
            "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).",
            "üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º": "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏: +7 (910) 864-07-37",
        }
        if text in mapping:
            return await update.message.reply_text(mapping[text], reply_markup=kb(MAIN_MENU))
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=kb(MAIN_MENU))

async def handle_callback(query_update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = query_update.callback_query
    data = query.data or ""
    await query.answer()

    if data.startswith("loc:"):
        loc = data[4:]
        try:
            await query.edit_message_text(f"–õ–æ–∫–∞—Ü–∏—è {loc}:")
        except Exception:
            try:
                await query.edit_message_reply_markup(reply_markup=None)
            except Exception:
                pass
        return await send_location_card(query.message.chat, loc, context)

    if data == "back_to_locs":
        try:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:")
            await query.edit_message_reply_markup(reply_markup=make_locations_inline())
        except Exception:
            await context.bot.send_message(query.message.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=make_locations_inline())
        context.user_data["state"] = "LOC_LIST"
        return

    if data == "back_to_menu":
        context.user_data.clear()
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return await send_welcome_with_photo(query_update, context)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
application.add_handler(CommandHandler(["start", "star"], cmd_start))
application.add_handler(CommandHandler("menu", cmd_menu))
application.add_handler(CommandHandler("ping", cmd_ping))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_error_handler(error_handler)

# ========= FLASK =========
web_app = Flask(__name__)

@web_app.get("/")
def index():
    return jsonify({"ok": True, "service": "MR.House bot"})

@web_app.get("/set_webhook")
def set_webhook_route():
    if not BASE_URL:
        return "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω", 400
    ensure_initialized()
    url = f"{BASE_URL}/webhook"
    try:
        LOOP.run_until_complete(application.bot.set_webhook(url))
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", 500

@web_app.post("/webhook")
def webhook():
    ensure_initialized()
    data = request.get_json(force=True, silent=False)
    update = Update.de_json(data, application.bot)
    try:
        LOOP.run_until_complete(application.process_update(update))
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return jsonify({"ok": False, "error": str(e)}), 500

if __name__ == "__main__":
    if BASE_URL:
        ensure_initialized()
        LOOP.run_until_complete(application.bot.set_webhook(f"{BASE_URL}/webhook"))
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)