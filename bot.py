import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import logging
import asyncio

# === üîß –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8497588100:AAFYuucn9j8teDlWZ6htv_N7IbaXLp1TQB8"
WEBHOOK_URL = "https://mrhouseklg-bot.onrender.com/webhook"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
application = Application.builder().token(TOKEN).build()

# === üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üèóÔ∏è –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="price"),
         InlineKeyboardButton("üìê –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
         InlineKeyboardButton("‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MR.House</b> ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ–º–æ–≤ –ø–æ–¥ –∫–ª—é—á.\n\n"
        "üè° –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º:\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞\n"
        "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ üëá"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode="HTML")


# === /debug ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ===
async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã!")


# === üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == "price":
        await query.message.reply_text("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞. –ú—ã –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!")
    elif query.data == "projects":
        await query.message.reply_text("üìê –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –¥–æ–º–∞ –æ—Ç 80 –¥–æ 250 –º¬≤. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–∞–ª–µ—Ä–µ—é!")
    elif query.data == "contacts":
        await query.message.reply_text("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nInstagram: @mr.house\n–°–∞–π—Ç: mrhouse.ru")
    elif query.data == "about":
        await query.message.reply_text("‚ÑπÔ∏è –ú—ã ‚Äî –∫–æ–º–ø–∞–Ω–∏—è MR.House, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –¥–æ–º–æ–≤ –ø–æ–¥ –∫–ª—é—á –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.")
    else:
        await query.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("debug", debug))
application.add_handler(CallbackQueryHandler(button_handler))

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
web_app = Flask(__name__)

@web_app.route("/", methods=["GET"])
def index():
    return "‚úÖ MR.House –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@web_app.route("/set_webhook", methods=["GET"])
def set_webhook():
    try:
        asyncio.get_event_loop().run_until_complete(
            application.bot.set_webhook(WEBHOOK_URL)
        )
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}"

@web_app.route("/webhook", methods=["POST"])
async def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –æ—Ç Telegram: {update}")
        await application.initialize()
        await application.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return "OK"


# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ Render ===
if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(application.bot.set_webhook(WEBHOOK_URL))
    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
