import os
import logging
import asyncio
from flask import Flask, request, jsonify
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ===== ENV =====
BOT_TOKEN = os.environ["BOT_TOKEN"]
BASE_URL  = os.environ.get("BASE_URL", "").rstrip("/")  # https://mrhouseklg-bot.onrender.com

# ===== LOGS =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
try:
    import telegram
    logger.info(f"PTB version={getattr(telegram,'__version__','unknown')} | module={telegram.__file__}")
except Exception:
    pass

# ===== PTB Application =====
application = Application.builder().token(BOT_TOKEN).build()
_initialized = False

def ensure_initialized() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PTB –æ–¥–∏–Ω —Ä–∞–∑, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop."""
    global _initialized
    if _initialized:
        return
    loop = asyncio.new_event_loop()
    try:
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.initialize())
        _initialized = True
        logger.info("‚úÖ Telegram Application initialized")
    finally:
        loop.close()
        asyncio.set_event_loop(None)

# ===== UI DATA =====
MAIN_MENU = [
    ["üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤", "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã"],
    ["üßÆ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"],
    ["üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
]

LOCATIONS = [
    "–®–æ–ø–∏–Ω–æ", "–ß–∏–∂–æ–≤–∫–∞", "–°–∏–≤–∫–æ–≤–æ",
    "–ù–µ–∫—Ä–∞—Å–æ–≤–æ", "–ì—Ä—É–∑–¥–æ–≤–æ", "–í–µ—Å–Ω–∞–õ—ç–Ω–¥ (–ß–µ—Ä–Ω–æ—Å–≤–∏—Ç–∏–Ω–æ)",
    "—Ä-–Ω –º–∞–≥–∞–∑–∏–Ω–∞ METRO", "–≥.–†—è–∑–∞–Ω—å", "–ï–ª–æ–≤–∫–∞", "–ö–ü –ú–æ—Å–∫–æ–≤—Å–∫–∏–π",
    "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
]

def kb(rows):
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=False, selective=True)

# –ö–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–∫–∞—Ü–∏–π: —Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
LOCATIONS_DATA = {
    "–®–æ–ø–∏–Ω–æ": {
        "photo": f"{BASE_URL}/static/locations/shopino/cover.jpg" if BASE_URL else None,
        "caption": (
            "<b>–®–æ–ø–∏–Ω–æ</b>\n"
            "–ü–æ—Å—ë–ª–æ–∫ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.\n"
            "–í –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ."
        ),
        "presentation": f"{BASE_URL}/static/locations/shopino/presentation.pdf" if BASE_URL else "https://example.com/presentation-shopino.pdf",
    },
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö (–∑–∞–º–µ–Ω–∏—à—å –ø—É—Ç–∏/—Ç–µ–∫—Å—Ç—ã –∏ –¥–æ–±–∞–≤–∏—à—å —Ñ–∞–π–ª—ã):
    # "–ß–∏–∂–æ–≤–∫–∞": {...}, "–°–∏–≤–∫–æ–≤–æ": {...}, ...
}

# ===== HELPERS =====
async def send_welcome_with_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    banner_url = f"{BASE_URL}/static/welcome.jpg" if BASE_URL else None
    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b>MR.House</b>.\n"
        "–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –ø—Ä–æ–µ–∫—Ç, –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    )
    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.effective_chat.id

    if banner_url:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=banner_url, caption=caption, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ-–±–∞–Ω–Ω–µ—Ä: {e}")
            await context.bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML")
    else:
        await context.bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML")

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb(MAIN_MENU))
    else:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb(MAIN_MENU))
    context.user_data["state"] = "MAIN"

async def show_locations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = [[n] for n in LOCATIONS]
    await update.message.reply_text(
        "-----–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤-----\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=kb(rows)
    )

def inline_back_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

async def send_location_card(chat, location_name: str, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å + –∫–Ω–æ–ø–∫—É '–°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é'."""
    data = LOCATIONS_DATA.get(location_name)
    if not data:
        await context.bot.send_message(chat_id=chat.id, text=f"–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è ¬´{location_name}¬ª.")
        return

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìò –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", url=data["presentation"])],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    try:
        if data.get("photo"):
            await context.bot.send_photo(
                chat_id=chat.id,
                photo=data["photo"],
                caption=data["caption"],
                parse_mode="HTML",
                reply_markup=markup
            )
        else:
            raise RuntimeError("no photo url")
    except Exception:
        await context.bot.send_message(
            chat_id=chat.id,
            text=data["caption"],
            parse_mode="HTML",
            reply_markup=markup
        )

# ===== HANDLERS =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await send_welcome_with_photo(update, context)

async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = "MAIN"
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb(MAIN_MENU))

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    state = context.user_data.get("state", "MAIN")

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        context.user_data["state"] = "MAIN"
        return await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb(MAIN_MENU))

    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        prev = context.user_data.get("prev_state", "MAIN")
        if prev == "LOC_LIST":
            context.user_data["state"] = "LOC_LIST"
            return await show_locations(update, context)
        context.user_data["state"] = "MAIN"
        return await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb(MAIN_MENU))

    # === MAIN ===
    if state == "MAIN":
        if text == "üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤":
            context.user_data["state"] = "LOC_LIST"
            return await show_locations(update, context)

        if text == "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã":
            return await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º üîß", reply_markup=kb(MAIN_MENU))

        if text == "üßÆ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏":
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å –∏ –±—é–¥–∂–µ—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).", reply_markup=kb(MAIN_MENU))

        if text == "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò":
            return await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).", reply_markup=kb(MAIN_MENU))

        if text == "üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
            return await update.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏: +7 (910) 864-07-37", reply_markup=kb(MAIN_MENU))

        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=kb(MAIN_MENU))

    # === LOCATIONS LIST ===
    if state == "LOC_LIST":
        if text in LOCATIONS and text not in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:
            # –û—Å—Ç–∞–≤–ª—è–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Ä—è–¥)
            context.user_data["prev_state"] = "LOC_LIST"
            await send_location_card(update.effective_chat, text, context)
            # –ü–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
            return await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
                reply_markup=kb([["‚Ü©Ô∏è –ù–∞–∑–∞–¥"], ["üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]])
            )
        else:
            return await show_locations(update, context)

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –≤–µ—Ä–Ω—ë–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    context.user_data["state"] = "MAIN"
    return await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb(MAIN_MENU))

async def handle_callback(query_update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')."""
    query = query_update.callback_query
    data = query.data or ""
    await query.answer()

    if data == "back_to_menu":
        context.user_data.clear()
        # –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –º–µ–Ω—é
        await query.edit_message_reply_markup(reply_markup=None)
        await send_welcome_with_photo(query_update, context)
        return

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
application.add_handler(CommandHandler(["start", "star"], cmd_start))
application.add_handler(CommandHandler("menu", cmd_menu))
application.add_handler(CommandHandler("ping", cmd_ping))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# ===== Flask (–≤–µ–±—Ö—É–∫–∏) =====
web_app = Flask(__name__)

@web_app.get("/")
def index():
    return jsonify({"ok": True, "service": "MR.House bot"})

@web_app.get("/set_webhook")
def set_webhook_route():
    if not BASE_URL:
        return "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω", 400
    url = f"{BASE_URL}/webhook"
    loop = asyncio.new_event_loop()
    try:
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.bot.set_webhook(url))
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", 500
    finally:
        loop.close()
        asyncio.set_event_loop(None)

@web_app.post("/webhook")
def webhook():
    ensure_initialized()
    data = request.get_json(force=True, silent=False)
    update = Update.de_json(data, application.bot)

    loop = asyncio.new_event_loop()
    try:
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.process_update(update))
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return jsonify({"ok": False, "error": str(e)}), 500
    finally:
        loop.close()
        asyncio.set_event_loop(None)

if __name__ == "__main__":
    if BASE_URL:
        url = f"{BASE_URL}/webhook"
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.bot.set_webhook(url))
        loop.close()
        asyncio.set_event_loop(None)
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)