import os
import logging
import asyncio
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === ENV ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_SECRET = os.environ["WEBHOOK_SECRET"]
BASE_URL = os.environ.get("BASE_URL", "").rstrip("/")  # https://...onrender.com

# === Logs + –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ—Ä—Å–∏–∏ PTB ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
try:
    import telegram
    logger.info(f"PTB version={getattr(telegram, '__version__', 'unknown')} | module={telegram.__file__}")
except Exception:
    pass

# === Telegram Application (PTB v20) ===
application = Application.builder().token(BOT_TOKEN).build()
_initialized = False

def ensure_initialized():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PTB –æ–¥–∏–Ω —Ä–∞–∑ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ asyncio.run)."""
    global _initialized
    if not _initialized:
        asyncio.run(application.initialize())
        _initialized = True
        logger.info("‚úÖ Telegram Application initialized")

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="price"),
            InlineKeyboardButton("–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects"),
        ],
        [
            InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
            InlineKeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about"),
        ],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MR.House. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler(["start", "star"], start))
application.add_handler(CommandHandler("ping", ping))
application.add_handler(MessageHandler(filters.Regex(r"^/?star$"), start))

# === Flask app (–≤—Å–µ —Ä–æ—É—Ç—ã –°–ò–ù–•–†–û–ù–ù–´–ï) ===
web_app = Flask(__name__)

@web_app.get("/")
def index():
    return jsonify({"ok": True, "service": "MR.House bot"})

@web_app.get("/set_webhook")
def set_webhook_route():
    if not BASE_URL:
        return "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω", 400
    url = f"{BASE_URL}/webhook"
    try:
        # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(application.bot.set_webhook(url, secret_token=WEBHOOK_SECRET))
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", 500

@web_app.post("/webhook")
def webhook():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram. –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π endpoint."""
    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    header_secret = request.headers.get("X-Telegram-Bot-Secret-Token")
    if header_secret != WEBHOOK_SECRET:
        logger.warning("‚õîÔ∏è –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º")
        return jsonify({"ok": False, "error": "forbidden"}), 403

    # 2) –†–∞–∑–±–æ—Ä –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(force=True, silent=False)
    update = Update.de_json(data, application.bot)

    # 3) –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PTB
    ensure_initialized()

    # 4) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try:
        asyncio.run(application.process_update(update))
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return jsonify({"ok": False, "error": str(e)}), 500

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    if BASE_URL:
        url = f"{BASE_URL}/webhook"
        asyncio.run(application.bot.set_webhook(url, secret_token=WEBHOOK_SECRET))
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)