# bot.py
import os
import logging
import asyncio
from typing import Dict, Any

from flask import Flask, request, url_for

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
BASE_URL = os.environ.get("BASE_URL", "").strip()  # https://mrhouseklg-bot.onrender.com
MANAGER_USERNAME = os.environ.get("MANAGER_USERNAME", "")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ @username
MANAGER_PHONE = os.environ.get("MANAGER_PHONE", "")        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ +7...

if not BOT_TOKEN or not BASE_URL:
    raise RuntimeError("–ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ BASE_URL")

# ==== –õ–æ–≥–∏ ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# ==== Flask ====
web_app = Flask(__name__, static_folder="static", static_url_path="/static")

# ==== Telegram application ====
application = Application.builder().token(BOT_TOKEN).build()

# ----------------------------------------------------------------------
# –î–ê–ù–ù–´–ï
# ----------------------------------------------------------------------

# –õ–æ–∫–∞—Ü–∏–∏ (inline-—Å–ø–∏—Å–æ–∫)
LOCATIONS = [
    "–®–æ–ø–∏–Ω–æ",
    "–ß–∏–∂–æ–≤–∫–∞",
    "–°–∏–≤–∫–æ–≤–æ",
    "–ù–µ–∫—Ä–∞—Å–æ–≤–æ",
    "–ì—Ä—É–∑–¥–æ–≤–æ",
    "–í–µ—Å–Ω–∞–õ—ç–Ω–¥ (–ß–µ—Ä–Ω–æc–≤–∏—Ç–∏–Ω–æ)",
    "—Ä-–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –ú–ï–¢–†–û",
    "–≥. –†—è–∑–∞–Ω—å",
    "–ï–ª–æ–≤–∫–∞",
    "–ö–ü –ú–æ—Å–∫–æ–≤—Å–∫–∏–π",
]

# –ü—Ä–æ–µ–∫—Ç—ã (–ª—é–±–æ–π cover/presentation ‚Äî —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤)
# –§–∞–π–ª—ã –∫–ª–∞–¥—ë–º –≤: static/projects/<slug>/
PROJECTS: Dict[str, Dict[str, Any]] = {
    "vesna90": {
        "title": "–í–µ—Å–Ω–∞ 90",
        "desc": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —Å–≤–µ—Ç–ª—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ 90 –º¬≤ ‚Äî –∏–¥–µ–∞–ª–µ–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –¥–æ–º.",
        "cover": "vesna90.jpg",         # –Ω–∞–ø—Ä–∏–º–µ—Ä: static/projects/vesna90/vesna90.jpg
        "presentation": "vesna90.pdf",  # –Ω–∞–ø—Ä–∏–º–µ—Ä: static/projects/vesna90/vesna90.pdf
    },
    "vesna98": {
        "title": "–í–µ—Å–Ω–∞ 98",
        "desc": "–£–¥–æ–±–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–æ–≤–æ–π –∑–æ–Ω–µ.",
        "cover": "vesna98.jpg",
        "presentation": "vesna98.pdf",
    },
    "vesna105": {
        "title": "–í–µ—Å–Ω–∞ 105",
        "desc": "–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 98-–≥–æ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ —Å–≤–µ—Ç–∞.",
        "cover": "vesna105.jpg",
        "presentation": "vesna105.pdf",
    },
    "vesna112": {
        "title": "–í–µ—Å–Ω–∞ 112",
        "desc": "–°–æ–ª–Ω–µ—á–Ω–∞—è –∫—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è, –¥–≤–µ –≤–∞–Ω–Ω—ã–µ, –∫–æ—Ä–∏–¥–æ—Ä —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.",
        "cover": "vesna112.jpg",
        "presentation": "vesna112.pdf",
    },
}

WELCOME_IMAGE_PATH = "static/welcome.jpg"  # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–ø–æ

# ----------------------------------------------------------------------
# –£–¢–ò–õ–ò–¢–´ –ö–õ–ê–í–ò–ê–¢–£–†
# ----------------------------------------------------------------------

def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤", callback_data="menu:locations")],
        [InlineKeyboardButton("üìê –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="menu:projects")],
        [
            InlineKeyboardButton("üßÆ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="menu:calc"),
            InlineKeyboardButton("ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò", callback_data="menu:ai"),
        ],
        [InlineKeyboardButton("üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="menu:manager")],
    ]
    return InlineKeyboardMarkup(rows)

def locations_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(title, callback_data=f"loc:{title}") ] for title in LOCATIONS]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)

def projects_kb() -> InlineKeyboardMarkup:
    rows = []
    for slug, meta in PROJECTS.items():
        rows.append([InlineKeyboardButton(meta["title"], callback_data=f"proj:{slug}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)

def back_to_locations_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ö –ª–æ–∫–∞—Ü–∏—è–º", callback_data="menu:locations")],
         [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main")]]
    )

def back_to_projects_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="menu:projects")],
         [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main")]]
    )

# ----------------------------------------------------------------------
# –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î
# ----------------------------------------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)
    if os.path.exists(WELCOME_IMAGE_PATH):
        try:
            with open(WELCOME_IMAGE_PATH, "rb") as f:
                await context.bot.send_photo(
                    chat_id=chat.id,
                    photo=f,
                    caption=(
                        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç **MR.House**.\n"
                        "–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –ø—Ä–æ–µ–∫—Ç, –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å "
                        "–∏ —Å–≤—è–∑–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
                    ),
                    parse_mode="Markdown",
                )
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å welcome.jpg: %s", e)

    # –¢–µ–∫—Å—Ç + –º–µ–Ω—é
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=main_menu_kb(),
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong")

# ----------------------------------------------------------------------
# –•–ï–ù–î–õ–ï–†–´ CALLBACK (INLINE-–ö–ù–û–ü–ö–ò)
# ----------------------------------------------------------------------

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data or ""
    chat_id = query.message.chat_id

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back:main":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=main_menu_kb())
        return

    # –ú–µ–Ω—é: –õ–æ–∫–∞—Ü–∏–∏
    if data == "menu:locations":
        await query.edit_message_text("-----–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–º–æ–≤-----\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
                                      reply_markup=locations_kb())
        return

    # –ú–µ–Ω—é: –ü—Ä–æ–µ–∫—Ç—ã
    if data == "menu:projects":
        await query.edit_message_text("-----–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–µ–∫—Ç—ã-----\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                                      reply_markup=projects_kb())
        return

    # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if data == "menu:manager":
        text = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
        if MANAGER_USERNAME:
            text += f"‚Ä¢ Telegram: {MANAGER_USERNAME}\n"
        if MANAGER_PHONE:
            text += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {MANAGER_PHONE}"
        if not (MANAGER_USERNAME or MANAGER_PHONE):
            text += "–ö–æ–Ω—Ç–∞–∫—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ."
        await query.edit_message_text(text, reply_markup=back_to_main_or_menu())
        return

    # –ó–∞–≥–ª—É—à–∫–∏ (—Ä–∞—Å—á—ë—Ç/–ò–ò)
    if data == "menu:calc":
        await query.edit_message_text(
            "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏–º. "
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–∂–Ω—ã: –ø–ª–æ—â–∞–¥—å, –º–∞—Ç–µ—Ä–∏–∞–ª, —É—á–∞—Å—Ç–æ–∫ –∏ —Ç.–¥.",
            reply_markup=back_to_main_or_menu(),
        )
        return

    if data == "menu:ai":
        await query.edit_message_text(
            "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, —è –æ—Ç–≤–µ—á—É. (–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=back_to_main_or_menu(),
        )
        return

    # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    if data.startswith("loc:"):
        title = data.split("loc:", 1)[1]
        caption = f"–õ–æ–∫–∞—Ü–∏—è **{title}**.\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å: –æ—Å—Ç–∞—Ç–∫–∏, –ø–ª–∞–Ω, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏?"
        await query.edit_message_caption(
            caption,
            parse_mode="Markdown"
        ) if query.message.photo else await query.edit_message_text(
            caption, parse_mode="Markdown", reply_markup=back_to_locations_kb()
        )
        # –ï—Å–ª–∏ –±—ã–ª–æ –Ω–µ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏:
        if not query.message.photo:
            await query.edit_message_text(
                caption,
                parse_mode="Markdown",
                reply_markup=back_to_locations_kb(),
            )
        return

    # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    if data.startswith("proj:"):
        slug = data.split("proj:", 1)[1]
        meta = PROJECTS.get(slug)
        if not meta:
            await query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=projects_kb())
            return

        # –ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–ª–æ–∂–∫—É –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        cover_url = f"{BASE_URL}/static/projects/{slug}/{meta['cover']}"
        pres_url = f"{BASE_URL}/static/projects/{slug}/{meta['presentation']}"
        caption = f"*{meta['title']}*\n{meta.get('desc','')}\n\nüìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {pres_url}"

        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ ‚Äî –∑–∞–º–µ–Ω–∏–º –µ–≥–æ —á–µ—Ä–µ–∑ media
        try:
            if query.message.photo:
                await query.edit_message_media(
                    media=InputMediaPhoto(media=cover_url, caption=caption, parse_mode="Markdown"),
                    reply_markup=back_to_projects_kb(),
                )
            else:
                # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ ¬´—Ç–µ–∫—Å—Ç–æ–º¬ª
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=cover_url,
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=back_to_projects_kb(),
                )
                await query.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç: {meta['title']}",
                    reply_markup=back_to_projects_kb(),
                )
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –ø—Ä–æ–µ–∫—Ç–∞ %s: %s", slug, e)
            await query.edit_message_text(
                f"{meta['title']}\n{meta.get('desc','')}\n\nüìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {pres_url}",
                reply_markup=back_to_projects_kb(),
            )
        return


def back_to_main_or_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main")]]
    )

# ----------------------------------------------------------------------
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# ----------------------------------------------------------------------
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("ping", ping))
application.add_handler(CallbackQueryHandler(on_callback))

# ----------------------------------------------------------------------
# FLASK –†–û–£–¢–´ (WEBHOOK)
# ----------------------------------------------------------------------

@web_app.get("/")
def index():
    return "MR.House bot is up."

@web_app.get("/set_webhook")
def set_webhook():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (GET –≤ –±—Ä–∞—É–∑–µ—Ä–µ)."""
    url = f"{BASE_URL}/webhook"
    try:
        asyncio.run(application.bot.set_webhook(url))
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ set_webhook")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", 500

@web_app.post("/webhook")
def receive_webhook():
    """–°—é–¥–∞ Telegram —à–ª—ë—Ç –∞–ø–¥–µ–π—Ç—ã. Flask —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ‚Äî –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—É—Å–∫–∞–µ–º asyncio.run"""
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        asyncio.run(application.initialize())
        asyncio.run(application.process_update(update))
        return "OK"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return f"Error: {e}", 500

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render, –Ω–æ —É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        asyncio.run(application.bot.set_webhook(f"{BASE_URL}/webhook"))
    except Exception as e:
        logger.warning("set_webhook –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ: %s", e)

    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", "10000")))
    