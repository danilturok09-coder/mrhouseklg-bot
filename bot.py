import os
import logging
import asyncio
from flask import Flask, request, jsonify

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Render / GitHub Secrets) ===
BOT_TOKEN = os.environ["BOT_TOKEN"]                 # —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
WEBHOOK_SECRET = os.environ["WEBHOOK_SECRET"]       # —Ç–≤–æ–π –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç (—Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ setWebhook)
BASE_URL = os.environ.get("BASE_URL", "").rstrip("/")  # https://<service>.onrender.com

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Telegram Application (PTB v20, async) ===
application = Application.builder().token(BOT_TOKEN).build()

# –§–ª–∞–≥ –∏ –ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PTB –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ (—Ñ–∏–∫—Å "–æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏")
_initialized = False
_init_lock = asyncio.Lock()

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="price"),
            InlineKeyboardButton("–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects"),
        ],
        [
            InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
            InlineKeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about"),
        ],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MR.House. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler(["start", "star"], start))  # /start –∏ —á–∞—Å—Ç–∞—è –æ–ø–µ—á–∞—Ç–∫–∞ /star
application.add_handler(CommandHandler("ping", ping))

# –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª—ë—Ç –ø—Ä–æ—Å—Ç–æ "star" –±–µ–∑ —Å–ª–µ—à–∞:
application.add_handler(MessageHandler(filters.Regex(r"^/?star$"), start))

# === Flask (WSGI) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
web_app = Flask(__name__)

@web_app.get("/")
def index():
    return jsonify({"ok": True, "service": "MR.House bot"})

@web_app.get("/set_webhook")
def set_webhook_route():
    """
    –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –æ–ø-–∞–≥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º).
    """
    if not BASE_URL:
        return "BASE_URL –Ω–µ –∑–∞–¥–∞–Ω", 400
    url = f"{BASE_URL}/webhook"
    try:
        asyncio.get_event_loop().run_until_complete(
            application.bot.set_webhook(url, secret_token=WEBHOOK_SECRET)
        )
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", 500

@web_app.post("/webhook")
async def webhook():
    """
    –¢–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram.
    –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    """
    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞: Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –µ–≥–æ –∫–∞–∫ X-Telegram-Bot-Secret-Token
    header_secret = request.headers.get("X-Telegram-Bot-Secret-Token")
    if header_secret != WEBHOOK_SECRET:
        logger.warning("‚õîÔ∏è –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º")
        return jsonify({"ok": False, "error": "forbidden"}), 403

    # 2) –†–∞–∑–±–æ—Ä –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(force=True, silent=False)
    update = Update.de_json(data, application.bot)

    # 3) –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB (—Ñ–∏–∫—Å ¬´/start —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑–∞¬ª)
    global _initialized
    if not _initialized:
        async with _init_lock:
            if not _initialized:
                await application.initialize()
                _initialized = True
                logger.info("‚úÖ Telegram Application initialized")

    # 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–∞
    try:
        await application.process_update(update)
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return jsonify({"ok": False, "error": str(e)}), 500

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞ Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
if name == "__main__":
    if BASE_URL:
        url = f"{BASE_URL}/webhook"
        asyncio.get_event_loop().run_until_complete(application.bot.set_webhook(url, secret_token=WEBHOOK_SECRET)
        )
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)
