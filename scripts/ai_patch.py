# scripts/ai_patch.py
# ------------------------------------------------------------------------------
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ) —á–µ—Ä–µ–∑ OpenAI API.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Auto Dev (MrHouse). –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç git-–ø–∞—Ç—á, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
# ------------------------------------------------------------------------------

import os
import subprocess
import sys
import tempfile
import pathlib
from textwrap import dedent
import requests

# === –ú–æ–¥–µ–ª—å OpenAI ============================================================
# gpt-4o ‚Äî —Å–∞–º–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å API –Ω–∞ 2025 –≥–æ–¥
MODEL = "gpt-4o"


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==================================================
def run(cmd: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç shell-–∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–±–æ–µ."""
    subprocess.check_call(cmd, shell=True)


def git(*args):
    """–£–¥–æ–±–Ω—ã–π –≤—ã–∑–æ–≤ git-–∫–æ–º–∞–Ω–¥."""
    run("git " + " ".join(args))


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =========================================================
def main(prompt: str):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ prompt (–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏).
    2. –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–µ—Ç–∫—É.
    3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É OpenAI diff-–ø–∞—Ç—á.
    4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç.
    """

    if not prompt.strip():
        print("‚ö†Ô∏è  No prompt provided ‚Äî skipping patch.")
        return

    repo_root = pathlib.Path(__file__).resolve().parents[1]
    os.chdir(repo_root)

    branch = "autodev/" + str(abs(hash(prompt)))[:8]
    git("checkout -b", branch)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    files = []
    for p in repo_root.rglob("*"):
        if p.is_file() and p.suffix in (".py", ".txt", ".md", ".yaml", ".yml"):
            if ".git" in p.parts or "venv" in p.parts:
                continue
            files.append(str(p.relative_to(repo_root)))

    # === –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI ======================================
    sys_prompt = dedent("""
    You are a professional software engineer.
    Your task: generate a unified diff patch (in git apply format)
    that applies requested changes to the repository.
    Return ONLY the patch, without explanations or extra text.
    Ensure valid syntax and indentation.
    """)

    user_content = (
        f"Change request:\n{prompt}\n\n"
        f"Repository files:\n" + "\n".join(files)
    )

    headers = {"Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}"}
    data = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": user_content},
        ],
    }

    print(f"ü§ñ Sending prompt to OpenAI ({MODEL})...")
    r = requests.post(
        "https://api.openai.com/v1/chat/completions",
        json=data,
        headers=headers,
        timeout=120,
    )

    if r.status_code != 200:
        print(f"‚ùå OpenAI API error: {r.status_code}\n{r.text}")
        sys.exit(1)

    patch = r.json()["choices"][0]["message"]["content"]
    print("‚úÖ Patch received. Applying...")

    # === –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á =======================================================
    with tempfile.NamedTemporaryFile("w+", delete=False) as tf:
        tf.write(patch)
        tf.flush()
        try:
            run(f"git apply {tf.name}")
        except Exception as e:
            print("‚ùå Patch apply failed:", e)
            print("Patch content:\n", patch)
            sys.exit(1)

    git("add", "-A")
    git("commit", "-m", "'autodev: apply changes'")
    print("‚úÖ Changes committed successfully!")


# === –ó–∞–ø—É—Å–∫ ==================================================================
if name == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--prompt", default="", help="Text of the change request")
    args = parser.parse_args()

    main(args.prompt)
